<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">果然</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2020-08-20T23:34:30&#43;08:00</updated>
    <id>https://cym2050.github.io/</id>
    <link rel="alternate" type="text/html" href="https://cym2050.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://cym2050.github.io/atom.xml" />
    <author>
            <name>CYM</name>
            <uri>https://cym2050.github.io/</uri>
            
                <email>cym2050@foxmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.74.3">Hugo</generator>
        <entry>
            <title type="text">Css五种经典布局</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/css%E4%BA%94%E7%A7%8D%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80/" />
            <id>https://cym2050.github.io/posts/css%E4%BA%94%E7%A7%8D%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-20T21:30:02&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">布局看这个基本上就可以了： http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html</summary>
            
                <content type="html">&lt;p&gt;布局看这个基本上就可以了：&lt;br&gt;
&lt;a href=&#34;http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html&#34;&gt;http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">为git Bash设置socks5代理，加速GitHub Git Clone</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E4%B8%BAgit-bash%E8%AE%BE%E7%BD%AEsocks%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9Fgithub-git-clone/" />
            <id>https://cym2050.github.io/posts/%E4%B8%BAgit-bash%E8%AE%BE%E7%BD%AEsocks%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9Fgithub-git-clone/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-18T18:23:08&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">本文假设你已经有了一个 socks5 协议的代理了，也就是说已经有了代理的环境，且能顺利访问404……</summary>
            
                <content type="html">&lt;p&gt;本文假设你已经有了一个 socks5 协议的代理了，也就是说已经有了代理的环境，且能顺利访问404网站。&lt;/p&gt;
&lt;p&gt;因为git bash是不走系统的代理的，所以需要单独配置。&lt;/p&gt;
&lt;p&gt;要清楚你自己的socks代理地址与端口，通常为 127.0.0.1:1080。&lt;/p&gt;
&lt;h2 id=&#34;一使用https-clone项目&#34;&gt;一、使用https clone项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开git bash依次输入这两条命令，输入之后会在.gitconfig文件内添加这两行配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;
git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就配置好了，现在使用&lt;code&gt;git clone https://github.com/username/repo.git&lt;/code&gt;方式clone项目就应该很快了，具体与你代理速度有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看有没有设置成功用以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --get --global http.proxy
git config --get --global https.proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消代理设置用以上命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global --unset http.proxy
git config --global --unset https.proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二使用ssh-clone项目&#34;&gt;二、使用ssh clone项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在你的.ssh文件夹（路径：C:\Users\n你的电脑用户名.ssh）添加一个config文件，就新建一个txt文本文件把名字改成config就行，没有后缀，然后把下面的代码复制粘贴，然后保存，记得把ip与端口改为你自己的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host github.com
User git
IdentityFile &amp;quot;C:\Users\Alan\.ssh\id_rsa&amp;quot;
ProxyCommand connect.exe -S 127.0.0.1:1080 %h %p
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上面代码里面由一个&lt;code&gt;connect.exe&lt;/code&gt;，这是一个命令行软件，把这个软件下载了后connect.exe文件放在上面说的.ssh文件夹内就行。&lt;br&gt;
&lt;a href=&#34;https://bitbucket.org/gotoh/connect/downloads/&#34;&gt;connect下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成上面设置好后使用&lt;code&gt;git clone git@github.com:username/repo.git&lt;/code&gt;ssh方式clon应该就很快了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">好文翻译</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E5%A5%BD%E6%96%87%E7%BF%BB%E8%AF%91/" />
            <id>https://cym2050.github.io/posts/%E5%A5%BD%E6%96%87%E7%BF%BB%E8%AF%91/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-12T17:51:48&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Redux</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/redux/" />
            <id>https://cym2050.github.io/posts/redux/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-11T22:37:02&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">理解 Redux Redux 本身是一个很轻的库，解决 component -&amp;gt; action -&amp;gt; reducer -&amp;gt; state 的单向数据流转问题。 按我理解，他有两个……</summary>
            
                <content type="html">&lt;p&gt;理解 Redux&lt;br&gt;
Redux 本身是一个很轻的库，解决 component -&amp;gt; action -&amp;gt; reducer -&amp;gt; state 的单向数据流转问题。&lt;/p&gt;
&lt;p&gt;按我理解，他有两个非常突出的特点是：&lt;/p&gt;
&lt;p&gt;predictable，可预测性&lt;br&gt;
可扩展性&lt;br&gt;
可预测性是由于他大量使用 pure function 和 plain object 等概念(reducer 和 action creator 是 pure function，state 和 action 是 plain object)，并且 state 是 immutable 的。这对于项目的稳定性会是非常好的保证。&lt;/p&gt;
&lt;p&gt;可扩展性则让我们可以通过 middleware 定制 action 的处理，通过 reducer enhancer 扩展 reducer 等等。从而有了丰富的社区扩展和支持，比如异步处理、Form、router 同步、redu/undo、性能问题(selector)、工具支持。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">可视化搭建系统</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F/" />
            <id>https://cym2050.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-08T19:16:09&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">快速搭建营销页面，用拖拉的方式 https://juejin.im/post/6854573220532748302</summary>
            
                <content type="html">&lt;p&gt;快速搭建营销页面，用拖拉的方式&lt;br&gt;
&lt;a href=&#34;https://juejin.im/post/6854573220532748302&#34;&gt;https://juejin.im/post/6854573220532748302&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">React的virtual Dom对于重排与重绘的优化</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/react%E7%9A%84virtual-dom%E5%AF%B9%E4%BA%8E%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E7%9A%84%E4%BC%98%E5%8C%96/" />
            <id>https://cym2050.github.io/posts/react%E7%9A%84virtual-dom%E5%AF%B9%E4%BA%8E%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E7%9A%84%E4%BC%98%E5%8C%96/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-08T15:36:51&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">virtual dom与real dom进行diff比较，获取实际变化的dom，这一切在内存中发生速……</summary>
            
                <content type="html">&lt;p&gt;virtual dom与real dom进行diff比较，获取实际变化的dom，这一切在内存中发生速度很快，得出diff后把更改批量的应用于real dom&lt;br&gt;
维护两棵virtual dom，对两棵virtual dom的查询减少了real dom的查询，也就减少了DOM的重排&lt;br&gt;
每当调用setState()方法时，ReactJS都会从头开始创建整个Virtual DOM。创建整棵树非常快，因此不会影响性能。&lt;br&gt;
在任何给定时间，ReactJS维护两个Virtual DOM，一个具有更新的状态Virtual DOM，另一个具有先前的状态Virtual DOM。&lt;br&gt;
和 DOM 操作比起来，js 计算是非常廉价的。Virtual DOM render + diff 显然比渲染 html 字符串要慢，但是，它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然好了太多。&lt;/p&gt;
&lt;p&gt;批量修改DOM元素的的核心思想是：&lt;br&gt;
- 让该元素脱离文档流&lt;br&gt;
- 对其进行多重修改&lt;br&gt;
- 将元素带回文档中&lt;/p&gt;
&lt;p&gt;JavaScript优化dom操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隐藏元素，进行修改后，然后再显示该元素
&lt;pre&gt;&lt;code&gt;let ul = document.querySelector(&#39;#list&#39;);
ul.style.didsplay = &#39;none&#39;;
//appendNode是自己写的函数，由于ul被抽出文档流了，所有函数里面修改dom节点不会频繁的引起dom重排
apendChild(ul, data);
ul.style.display = &#39;block&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上操作会造成两次重排，分别是元素的隐藏与显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;使用文档片段创建一个子树，然后拷贝到文档流中
&lt;pre&gt;&lt;code&gt;let fragment = document.createDocumentFragment();
appendNode(fragment, data);
ul.appendChild(fragment);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文档片段是一个轻量级的document对象，它设计的目的就是用于更新，移动节点之类的任务；以上方法并不会是元素短暂消失，造成逻辑问题，且只涉及了一次重排&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;将原始元素拷贝到一个独立的节点中，操作这个节点，然后覆盖原始元素
&lt;pre&gt;&lt;code&gt;let old = document.querySelector(&#39;#list&#39;);
let clone = old.cloneNode(true);
appendNode(clone, data);
old.parentNode.replaceChild(clone, old);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述只引发了一次重排&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;浏览器优化：队列化修改并批量执行，需实时反馈给用户的属性浏览器优化会失效&lt;/p&gt;
&lt;p&gt;最小化重绘和重排：使用cssText代替单个样式修改，使用类修改样式&lt;/p&gt;
&lt;p&gt;参考： &lt;a href=&#34;https://juejin.im/post/6844903902689656845&#34;&gt;https://juejin.im/post/6844903902689656845&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">重排和重绘</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/" />
            <id>https://cym2050.github.io/posts/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-08T13:07:19&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">重绘和重排 一旦浏览器下载了所有的页面组件——HTML标签，Javascript，CS……</summary>
            
                <content type="html">&lt;p&gt;重绘和重排&lt;br&gt;
一旦浏览器下载了所有的页面组件——HTML标签，Javascript，CSS，图片 —— 它解析这些文件，并创建两个内部的数据接口：&lt;/p&gt;
&lt;p&gt;一个DOM树,代表页面结构&lt;br&gt;
一个渲染树,代表DOM节点将会如何被显示&lt;/p&gt;
&lt;p&gt;对于需要显示的每一个Dom节点，渲染树至少有一个节点。在渲染树中的节点叫作frames或boxes，对应CSS盒子模型(包括padding、margins、borders、position)。一旦DOM和渲染树构造完成，浏览器可以在页面上绘制(paint)元素&lt;/p&gt;
&lt;p&gt;当元素的几何被改变(宽度和高度) —比如border变得更粗或者在段落中添加更多的文本，浏览器需要重新计算元素的几何值和被改变影响到的其他元素的几何或位置。浏览器会使呈现树的部分失效并重新构建渲染树，这个过程叫作reflow。一旦reflow完成，浏览器重新绘制影响的部分，称为repaint。&lt;/p&gt;
&lt;p&gt;不是所有的DOM改变都会影响几何。比如，改变元素的背景色不会改变它的宽和高，这种情况下，只会有repaint(不会发生reflow)，因为元素的布局没有被改变。&lt;/p&gt;
&lt;p&gt;重绘和重排是昂贵的操作，可以使web应用的UI减少响应。因此，尽可能减少他们的发生是很重要的。&lt;/p&gt;
&lt;p&gt;什么时候会发生重排？&lt;br&gt;
就像上面提到的，无论什么时候布局和几何改变，重排都是需要的。这些发生在以下情况：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;可视化DOM元素被添加或删除
元素改变位置
元素改变尺寸(因为margin、padding、border厚度、宽度、高度等)
内容改变，比如，文本改变或图片被替换成一个不同的尺寸
页面初始化渲染
浏览器窗口大小改变
取决于变化的性质，渲染树种一个小的或大的部分需要被重新计算，一些改变会导致整个页面的重排:比如，当滚动条出现
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;存队列和刷新渲染树的变化&lt;br&gt;
因为每次重排都有计算资源消耗，大多数浏览器通过把改变放入队列，并批量执行他们来优化重排。然而你可能会经常无意识地强制队列去刷新，请求所有的计划改变立刻被执行。当你想要检索布局信息时，队列会被强制刷新，这些检索布局信息的接口如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;offsetTop,offsetLeft,offsetWidth,offsetHeight
scrollTop,scrollLeft,scrollWidth,scrollHeight
clientTop,clientLeft,clientWidth,clientHeight
getComputedStyle()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;被这些属性和方法返回的布局信息需要被更新，所以浏览器必须去执行渲染队列中改变和reflow，为了返回正确的值。&lt;/p&gt;
&lt;p&gt;在改变样式的过程中，最好不要使用以上任何属性。因为即便你获取到的布局信息最近没有改变或者与最后的改变没关系，仍然会刷新渲染队列。&lt;/p&gt;
&lt;p&gt;考虑下面的代码，改变同一个样式属性三次:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var computed,
      tmp=&#39;&#39;,
      bodystyle=document.body.style;
if(document.body.currentStyle){
  computed=document.body.currentStyle;
} else{
  computed=document.defaultView.getComputedStyle(document.body,&#39;&#39;);
}
// inefficient way of modiying the same property
// and retrieving style information right after
bodystyle.color=&#39;red&#39;;
tmp=computed.backgroundColor;
bodystyle.color=&#39;white&#39;;
tmp=computed.backgroundImage;
bodystyle.color=&#39;green&#39;;
tmp=computed.backgroundAttachment;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子中，body元素的前景色被改变了三次，并且每次改变后，都有一个样式计算属性被访问，这些检索的属性(backgroundColor,backgroundImage和backgroundAttachment)是与color改变不相干的。但是浏览器需要刷新渲染队列并重排，因为计算样式属性本就有这个要求的事实。&lt;/p&gt;
&lt;p&gt;最好的方法是在改变的时候，不要请求访问布局信息。比如计算样式属性访问移到最后，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bodystyle.color=&#39;red&#39;;
bodystyle.color=&#39;white&#39;;
bodystyle.color=&#39;green&#39;;
tmp=computed.backgroundColor;
tmp=computed.backgroundImage;
tmp=computed.backgroundAttachment;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子在所有浏览器上都是快速的。&lt;/p&gt;
&lt;p&gt;最小化重绘和重排&lt;br&gt;
重绘和重排是昂贵的，所以最好的策略是减少他们的数量。为了减少数量，你应该合并多个DOM和样式改变到一个批次然后一次性应用他们。&lt;/p&gt;
&lt;p&gt;样式改变&lt;br&gt;
思考下面的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var el=document.getElementById(&#39;mydiv&#39;);
el.style.borderLeft=&#39;1px&#39;;
el.style.borderRight=&#39;2px&#39;;
el.style.padding=&#39;5px&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有三个样式属性被改变，他们中的每一个都会影响元素的几何。最坏的情况，会导致浏览器重排三次。大多数现代浏览器做了优化，只会重排一次，但在老浏览器，它依然是低效的。如果有其他代码在代码运行期间请求布局信息，它可能导致三次重排。&lt;/p&gt;
&lt;p&gt;最有效的方式是合并所有的改变并一次性应用他们，仅用一次就修改DOM。这个能够使用cssText属性来做到:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var el=document.getElementById(&#39;mydiv&#39;);
el.style.cssText=&#39;border-left:1px;border-right:2px;padding:5px;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面修改cssText的属性会覆盖掉已存在的样式，为了保持存在的样式，你可以添加在原cssText字符串后追加:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;el.style.cssText+=&#39;;border-left:1px;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者改变Css 类名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var le=document.getElementById(&#39;mydiv&#39;);
el.className=&#39;active&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;批量改变DOM&lt;br&gt;
当你做多个DOM元素的改变时，你可以通过以下步骤来减少重绘和重排数量：&lt;/p&gt;
&lt;p&gt;1.把元素脱离文档流&lt;br&gt;
2.对元素做多个修改&lt;br&gt;
3.把元素返回文档流&lt;br&gt;
这个过程会导致两次重排——一次在步骤1，另一次在步骤3。如果你省略这些步骤，在步骤2中的每次改变都会导致重排&lt;/p&gt;
&lt;p&gt;有三种基本的方法可以在脱离文档流的情况下修改DOM：&lt;/p&gt;
&lt;p&gt;隐藏元素，应用修改，然后再显示元素&lt;br&gt;
使用文档片段documentFragment构建子树，然后再拷贝到文档中&lt;br&gt;
拷贝初始元素到一个脱离文档的节点，然后再拷贝上修改，最后替换初始元素&lt;br&gt;
为了说明脱离文档的操作，考虑下面的链接列表必须被更多信息更新:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;mylist&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://phpied.com&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://julienlecomte.com&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设另外的数据已经包含在对象中，需要插入列表，数据如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var data=[
  {
    &amp;quot;name&amp;quot;:&amp;quot;Nicholas&amp;quot;,
    &amp;quot;url&amp;quot;:&amp;quot;http://nczonline.net&amp;quot;
  },
 {
    &amp;quot;name&amp;quot;:&amp;quot;Ross&amp;quot;,
    &amp;quot;url&amp;quot;:&amp;quot;http://techfoolery.com&amp;quot;
  }
];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面是更加数据更新节点的一般方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function appendDataToElement(appendToElement,data){
  var a,li;
  for(var i=0,max=data.length;i&amp;lt;max;i++){
    a=document.createElement(&#39;a&#39;);
    a.href=data[i].url;
    a.appendChild(document.createTextNode(data[i].name));
    li=document.createElement(&#39;li&#39;);
    li.appendChild(a);
    appendToElement.appendChild(li);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用这个方法，每次新的实体被追加到DOM文档中时，都会导致重排。&lt;br&gt;
就像上面讨论的，一种减少重排的方法是通过使用display属性，零时把&lt;ul&gt;元素从文档流中删除，然后再返回：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ul=document.getElementById(&#39;mylist&#39;);
ul.style.display=&#39;none&#39;;
appendDataToElement(ul,data);
ul.style.display=&#39;block&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外一种最小化重排的方法是创建和更新一个文档片段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var fragment=document.createDocumentFragment();
appendDataToElement(fragment,data);
document.getElementById(&#39;mylist&#39;).appendChild(fragment);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三种解决方案是创建一个你想更新的节点的拷贝，然后再拷贝上工作，最后使用拷贝替换到老的节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var old=document.getElementById(&#39;mylist&#39;);
var clone=old.cloneNode(true);
appendDataToElement(clone,data);
old.parentNode.replaceChild(clone,old);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;缓存布局信息&lt;br&gt;
之前已经提到的，浏览器使用队列尝试最小化重排数量，然后批量执行他们。但当你请求布局信息比如offsets，滚动值，或计算的样式信息，浏览器刷新队列并应用所有的改变，为了返回更新后的值。最小化布局信息的请求数量是最好的方式，当你请求它的时候，分配它到局部变量中，然后访问局部变量。&lt;/p&gt;
&lt;p&gt;考虑一个移动myElement元素的例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// inefficient
myElement.style.left=1+myElement.offsetLeft+&#39;px&#39;;
myElement.style.top=1+myElement.offsetTop+&#39;px&#39;;
if(myElement.offsetLeft&amp;gt;=500){
  stopAnimation();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个是没有效率的，因为每次元素移动时，代码请求offset值，导致浏览器刷新渲染队列，这个对于性能来说是没有益处的。一个最好的方式是访问位置信息一次，然后存在它到变量中，比如var current=myElement.offsetLeft;，然后在动画循环中，在current变量上工作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;current++;
myElement.style.left=current+&#39;px&#39;;
myElement.style.top=current+&#39;px&#39;;
if(current&amp;gt;=500){
  stopAnimation();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件代理&lt;br&gt;
当在一个页面上有很多元素，并且他们中的每一个都一个或多个事件绑定(比如onclick)，这个可能影响性能。更多的DOM节点，你需要去访问并修改，会使你的应用程序变慢。另外附加事件需要处理时间，而且浏览器需要跟踪每一个事件，这个会消耗内存。&lt;/p&gt;
&lt;p&gt;一个简单的方法是使用事件代理技术来处理。这个基于一个事实：事件冒泡并且能被父元素处理。使用事件代理，你可以只在包裹元素上绑定一个事件，处理所有孩子节点触发的事件&lt;/p&gt;
&lt;p&gt;作者：common&lt;br&gt;
链接：https://www.jianshu.com/p/0a2f56a43b0c&lt;br&gt;
来源：简书&lt;br&gt;
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">React</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/react/" />
            <id>https://cym2050.github.io/posts/react/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-08T11:10:46&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">React既非框架也非编程语言，而是一个遵循某些原则的库，因为它依赖一些第三方库来提……</summary>
            
                <content type="html">&lt;p&gt;React既非框架也非编程语言，而是一个遵循某些原则的库，因为它依赖一些第三方库来提供一些核心功能（如路由）；它的开发人员之所以选择这些原则，是因为认为这些原则更适合用来构建响应式和函数式用户界面；它基于&lt;strong&gt;声明式范式，而非命令式范式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;声明范式：告诉程序what want&lt;br&gt;
命令范式：告诉程序how to do&lt;/p&gt;
&lt;p&gt;因为react native的出现，react抽离了react-dom&lt;br&gt;
所有使用jsx的地方都要import react，因为jsx是React.creatElement()方法的语法糖&lt;br&gt;
constructor主要用来初始化state和绑定this&lt;br&gt;
setState不会立即更新state值，执行到shouldComponentUpdate，对比前后通过返回true、false更新state出发render&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">How Does JavaScript Work？</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/how-does-javascript-work/" />
            <id>https://cym2050.github.io/posts/how-does-javascript-work/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-07T22:03:02&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">在最基本的形式中，JavaScript是一种同步的、阻塞的、单线程的语言，在这种语言……</summary>
            
                <content type="html">&lt;p&gt;在最基本的形式中，JavaScript是一种同步的、阻塞的、单线程的语言，在这种语言中，一次只能执行一个操作。但web浏览器定义了函数和API，允许我们当某些事件发生时不是按照同步方式，而是异步地调用函数(比如，时间的推移，用户通过鼠标的交互，或者获取网络数据)。这意味着您的代码可以同时做几件事情，而不需要停止或阻塞主线程。&lt;/p&gt;
&lt;p&gt;异步还是同步执行代码，取决于我们要做什么。&lt;/p&gt;
&lt;p&gt;有些时候，我们希望事情能够立即加载并发生。例如，当将一些用户定义的样式应用到一个页面时，您希望这些样式能够尽快被应用。&lt;/p&gt;
&lt;p&gt;但是，如果我们正在运行一个需要时间的操作，比如查询数据库并使用结果填充模板，那么最好将该操作从主线程中移开使用异步完成任务。随着时间的推移，您将了解何时选择异步技术比选择同步技术更有意义。&lt;/p&gt;
&lt;p&gt;单线程意味着只有一个call stack，所以一次只能做一件事情&lt;/p&gt;
&lt;h4 id=&#34;什么是程序&#34;&gt;什么是程序&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;分配内存&lt;/li&gt;
&lt;li&gt;解析并执行每一行代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;javascript引擎&#34;&gt;JavaScript引擎&lt;/h4&gt;
&lt;p&gt;每个浏览器都实现了JavaScript引擎，在Google chrome中是V8引擎读取并执行js代码。引擎由两个部分组成：memory heap和call stack&lt;/p&gt;
&lt;p&gt;memory heap是分配内存的地方,如下a,b,c存储在memory heap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const a = 1;
const b = 2;
const c = [1, 2];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;call stack是读取并执行代码的地方，如下一行一行读取并执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&#39;1&#39;);
console.log(&#39;2&#39;);
console.log(&#39;3&#39;);
//result:
1
2
3
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;单线程阻塞情况&#34;&gt;单线程阻塞情况&lt;/h4&gt;
&lt;p&gt;假设：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function longtime () {发送http请求};
console.log(&#39;1&#39;);
longtime();
console.log(&#39;2&#39;);
console.log(&#39;3&#39;);

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中longtime要花很长时间才能执行完毕，程序不就会阻塞在这里，用户界面会卡死掉吗？&lt;/p&gt;
&lt;h4 id=&#34;javascript运行时环境&#34;&gt;JavaScript运行时环境&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cym2050.github.io/images/image-20200807231719301.png&#34; alt=&#34;image-20200807231719301&#34;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript是单线程的，或者说JavaScript运行在单线程中，但JavaScript是工作在浏览器中的，而浏览器不只是JavaScript，其有以下线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript引擎线程&lt;/li&gt;
&lt;li&gt;GUI渲染线程&lt;/li&gt;
&lt;li&gt;Event Loop线程（负责其他线程与主线程的通信，如网络IO，数据库IO，文件IO）&lt;/li&gt;
&lt;li&gt;时间触发线程&lt;/li&gt;
&lt;li&gt;定时器线程&lt;/li&gt;
&lt;li&gt;网络请求线程&lt;br&gt;
其次浏览器还提供了Web APIs（DOM，AJAX和 time　out），callback queue，event loop机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：　&lt;a href=&#34;https://juejin.im/post/6844903606466904078&#34;&gt;event loop&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">值传递与引用传递</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/" />
            <id>https://cym2050.github.io/posts/%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-07T20:27:47&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">值传递 引用传递 复制数组 var a = [1, 2, 3, 4]; var b = [].concat(a); 复制对象 let obj = {a: &#39;a&#39;, b: &#39;b&#39;, c: &#39;c&#39;}; let clone1 = Object.assign({}, obj); //……</summary>
            
                <content type="html">&lt;h5 id=&#34;值传递&#34;&gt;值传递&lt;/h5&gt;
&lt;h5 id=&#34;引用传递&#34;&gt;引用传递&lt;/h5&gt;
&lt;p&gt;复制数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = [1, 2, 3, 4];
var b = [].concat(a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复制对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj = {a: &#39;a&#39;, b: &#39;b&#39;, c: &#39;c&#39;};
let clone1 = Object.assign({}, obj);
//使用扩散操作符
let clone2 = {...obj}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;深克隆&lt;br&gt;
对象里面还有对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj = {
  a: &#39;a&#39;,
  b: &#39;b&#39;,
  c: {
    deep: &#39;this is deep&#39;
  }
}

let superClone = JSON.parse(JSON.stringify(obj))
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Currying and Compose</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/currying-and-compose/" />
            <id>https://cym2050.github.io/posts/currying-and-compose/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-07T18:07:14&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Currying 将参数转化为函数 const curriedMultiply = (a) =&amp;gt; (b) =&amp;gt; a * b; const multiplyBy5 = curriedMultiply(5); Compose 接受函数作为参数，后面的函数为前面的……</summary>
            
                <content type="html">&lt;h5 id=&#34;currying&#34;&gt;Currying&lt;/h5&gt;
&lt;p&gt;将参数转化为函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const curriedMultiply = (a) =&amp;gt; (b) =&amp;gt; a * b;
const multiplyBy5 = curriedMultiply(5);
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;compose&#34;&gt;Compose&lt;/h5&gt;
&lt;p&gt;接受函数作为参数，后面的函数为前面的函数的参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const compose = (f, g) =&amp;gt; (a) =&amp;gt; f(g(a));

const sum = (num) =&amp;gt; num + 1;

compose(sum, sum)(5); 结果为7
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">DOM Selecters</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/dom-selecters/" />
            <id>https://cym2050.github.io/posts/dom-selecters/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-06T23:06:24&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">DOM Selectors getElementsByTagName
getElementsByClassName
getElementById
querySelector
querySelectorAll
getAttribute
setAttribute
Changing Styles style.{property} //ok
className //best
classList //best
classList.add
classList.remove
classList.toggle
Bonus innerHTML //DANGEROUS
parentElement
children
It is important to CACHE selectors in variables </summary>
            
                <content type="html">&lt;h3 id=&#34;dom-selectors&#34;&gt;DOM Selectors&lt;/h3&gt;
&lt;p&gt;getElementsByTagName&lt;br&gt;
getElementsByClassName&lt;br&gt;
getElementById&lt;/p&gt;
&lt;p&gt;querySelector&lt;br&gt;
querySelectorAll&lt;/p&gt;
&lt;p&gt;getAttribute&lt;br&gt;
setAttribute&lt;/p&gt;
&lt;h3 id=&#34;changing-styles&#34;&gt;Changing Styles&lt;/h3&gt;
&lt;p&gt;style.{property} //ok&lt;/p&gt;
&lt;p&gt;className //best&lt;br&gt;
classList //best&lt;/p&gt;
&lt;p&gt;classList.add&lt;br&gt;
classList.remove&lt;br&gt;
classList.toggle&lt;/p&gt;
&lt;h3 id=&#34;bonus&#34;&gt;Bonus&lt;/h3&gt;
&lt;p&gt;innerHTML //DANGEROUS&lt;br&gt;
parentElement&lt;br&gt;
children&lt;/p&gt;
&lt;h3 id=&#34;it-is-important-to-cache-selectors-in-variables&#34;&gt;It is important to CACHE selectors in variables&lt;/h3&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Advanced Arrays</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/advanced-arrays/" />
            <id>https://cym2050.github.io/posts/advanced-arrays/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-06T21:53:29&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1.forEach forEach不返回任何值 对参数里的每一项作为参数执行函数 对象(参数).forEa……</summary>
            
                <content type="html">&lt;h5 id=&#34;1foreach&#34;&gt;1.forEach&lt;/h5&gt;
&lt;p&gt;forEach不返回任何值&lt;br&gt;
对参数里的每一项作为参数执行函数&lt;br&gt;
对象(参数).forEach(函数(对象的属性，索引))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const array = [1, 2, 3, 4];
array.forEach((num) =&amp;gt; {
  console.log(num);
})
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;map&#34;&gt;map&lt;/h5&gt;
&lt;p&gt;不修改原数组本省，必须用retur显式返回值，不然会返回undefined&lt;br&gt;
对每个数组元素执行一遍所给函数后返回新数组&lt;/p&gt;
&lt;h5 id=&#34;filter&#34;&gt;filter&lt;/h5&gt;
&lt;p&gt;必须用retur显式返回值，不然会返回undefined&lt;br&gt;
过滤符合函数条件的item，并返回一个新数组&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">WAV FLAC APE</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/wav-flac-ape/" />
            <id>https://cym2050.github.io/posts/wav-flac-ape/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-05T22:30:44&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">数据储存：APE, FLAC, WAV, 均可还原出相同的音频数据 解码速度：APE&amp;lt;FLAC&amp;lt……</summary>
            
                <content type="html">&lt;p&gt;数据储存：APE, FLAC, WAV, 均可还原出相同的音频数据&lt;/p&gt;
&lt;p&gt;解码速度：APE&amp;lt;FLAC&amp;lt;WAV&lt;/p&gt;
&lt;p&gt;播放音质：APE&amp;lt;FLAC&amp;lt;WAV&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">CSS Grid</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/css-grid/" />
            <id>https://cym2050.github.io/posts/css-grid/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-04T20:45:28&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">分清楚container与item 用Flex与Grid组合可能是一种比Bootstr……</summary>
            
                <content type="html">&lt;p&gt;分清楚container与item&lt;/p&gt;
&lt;p&gt;用Flex与Grid组合可能是一种比Bootstrap更好的方式&lt;/p&gt;
&lt;p&gt;flex vs grid&lt;/p&gt;
&lt;h4 id=&#34;grid作用于container子元素p&#34;&gt;grid作用于container子元素P&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;p class=&amp;quot;p1&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;p2&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

对于整个容器
container {
  display: grid;
  //自动填充，每个网格不得小于200px
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  grid-template-rows: 1fr;
  //justify-items用于container
  justify-items: 
  align-items
}
对于容器内的单个元素
.p1 {
  //占用两列
  grid-column-start: 1;
  grid-column-end: 3;
  //与上面效果一样
  grid-column: 1/3;
  //占用所有列，也就是一行
  grid-column: 1/-1;
  //跨越2个gridbox
  grid-column: span 2;

  //行，与上述差不多
  grid-row: 

  //justify-self用于自己
  justify-self:
  align-self: start or end
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;都是对所有列或者所有行起作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;grid-gap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grid-template-columns: px,%,fr分数(更具响应性，随窗口自动变化)，auto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grid-template-rows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repeat(3, 1fr)重复3个1fr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repeat(auto-fill, minmax(200px, 1fr)) 当水平收缩浏览器页面时，一旦一个Grid box小于200px就会自动流向下一行，gridbox自动变换大小，也就是说一行能容纳几个200px以上Gridbox就放几个，不行就放到下一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(水平)justify-items：stretch（默认，伸展），start（从头对齐，只占用box空间，剩下的grid空间透明），end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(垂直)align-items:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Media queries&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//当屏幕宽度小于600px时使用以下属性
@media only screen and (max-width: 600px) {
  
}
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">什么是CDN</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AFcdn/" />
            <id>https://cym2050.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AFcdn/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-04T18:17:15&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">转载于：https://www.cloudflare.com/zh-cn/learn……</summary>
            
                <content type="html">&lt;p&gt;转载于：https://www.cloudflare.com/zh-cn/learning/cdn/what-is-a-cdn/&lt;/p&gt;
&lt;h5 id=&#34;什么是cdn&#34;&gt;什么是CDN？&lt;/h5&gt;
&lt;p&gt;内容交付网络（CDN）是指一组在地理上分散的服务器，它们协同工作以提供互联网内容的快速交付。&lt;/p&gt;
&lt;p&gt;CDN允许快速转移加载互联网内容所需的资产，包括HTML页面、javascript 文件、样式表、图像和视频。 CDN服务的受欢迎程度持续增长。如今，大多数网页流量都通过CDN提供服务，包括来自Facebook、奈飞和亚马逊等主要网站的流量。&lt;/p&gt;
&lt;p&gt;正确配置的 CDN 还可帮助保护网站免受某些常见的恶意攻击，例如分布式拒绝服务（DDOS）攻击 。&lt;/p&gt;
&lt;h5 id=&#34;cdn是否与网络主机相同&#34;&gt;CDN是否与网络主机相同？&lt;/h5&gt;
&lt;p&gt;虽然 CDN 不承载内容，也不能取代对适当网页托管的需求，但它确实有助于在网络边缘缓存内容，从而提高了网站性能。许多网站很难通过传统的主机服务满足其性能需求，这就是为什么他们选择 CDN 的原因。&lt;/p&gt;
&lt;p&gt;通过利用缓存来减少托管带宽， 帮助防止服务中断 ，以及提高安全性 ，CDN是为减轻传统网页托管所导致的一些主要痛点的流行选择。&lt;/p&gt;
&lt;h5 id=&#34;使用cdn有什么好处&#34;&gt;使用CDN有什么好处？&lt;/h5&gt;
&lt;p&gt;尽管使用CDN的好处取决于互联网属性的大小和需求，但对于大多数用户而言，主要优势有以下四个不同的组成部分：&lt;/p&gt;
&lt;p&gt;缩短网站加载时间 – 通过使用附近的CDN服务器（以及其他优化措施），将内容分发到网站访问者附近，访问者将能体验到更快的页面加载时间。由于访问者更倾向于离开加载缓慢的网站，CDN 可以降低跳出率并增加人们在该网站上停留的时间。换句话说，网站速度越快，意味着更强的用户粘性。&lt;/p&gt;
&lt;p&gt;减少带宽成本 – 网站托管的带宽消耗成本是网站的主要费用。通过缓存和其他优化，CDN能够减少源站必须提供的数据量，从而降低网站所有者的托管成本。&lt;/p&gt;
&lt;p&gt;增加内容可用性和冗余 – 大流量或硬件故障可能会扰乱正常的网站功能。由于CDN具有分布式特性，因此与许多源站相比，CDN 可以更好地处理更多流量并承受硬件故障。&lt;/p&gt;
&lt;p&gt;改善网站安全性 – CDN可以通过提供 DDoS防护、安全证书的改进以及其他优化措施来提高安全性。&lt;/p&gt;
&lt;h5 id=&#34;cdn如何工作&#34;&gt;CDN如何工作？&lt;/h5&gt;
&lt;p&gt;CDN的核心是连接在一起的服务器网络，其目标是尽可能快速、低价、可靠和安全地交付内容。为了提高速度和连接性，CDN会将服务器放置在不同网络之间的交换点。&lt;/p&gt;
&lt;p&gt;这些 互联网交换点（IXP）是不同互联网提供商连接的主要位置，以便彼此提供对来自其不同网络的流量的访问。通过连接到这些高速且高度互连的位置，CDN 提供商可以减少高速数据传递中的成本和传输时间。&lt;/p&gt;
&lt;p&gt;除了在 IXP 中放置服务器之外，CDN 还对标准客户端/服务器数据传输进行了诸多优化。 CDN 将数据中心放置在全球的战略位置，以增强安全性，并设计用于承受各种类型的故障和互联网拥塞。&lt;/p&gt;
&lt;h5 id=&#34;延迟--cdn如何改善网站加载时间&#34;&gt;延迟 – CDN如何改善网站加载时间？&lt;/h5&gt;
&lt;p&gt;关于网站加载内容，用户的耐心会随着网站速度变慢而快速下降。 CDN服务可以通过以下方式帮助减少加载时间：&lt;/p&gt;
&lt;p&gt;CDN 的全球分布意味着减少用户与网站资源之间的距离。 CDN 使得用户不必连接到网站源站的所在地，而可以连接到地理位置更近的数据中心 。更少的传输时间意味着更快的服务。&lt;/p&gt;
&lt;p&gt;硬件和软件优化，例如有效的负载均衡和固态硬盘驱动器，可以帮助数据更快地到达用户。&lt;/p&gt;
&lt;p&gt;CDN可以使用极简化和文件压缩之类的策略来减小文件大小，从而减少传输的数据量。较小的文件意味着更快的加载时间。&lt;/p&gt;
&lt;p&gt;CDN还可以通过优化连接重用和启用TLS假开始证书来加快使用 TLS / SSL 的站点。&lt;/p&gt;
&lt;h5 id=&#34;可靠性和冗余--cdn如何使网站始终保持在线状态&#34;&gt;可靠性和冗余 – CDN如何使网站始终保持在线状态？&lt;/h5&gt;
&lt;p&gt;对于拥有互联网资产的任何人来说，正常运行时间都是至关重要的组成部分。由于恶意攻击或流行性增加而导致的硬件故障和流量激增，有可能使网页服务器停机并阻止用户访问站点或服务。完善的 CDN 具有可最大程度减少停机时间的多项功能：&lt;/p&gt;
&lt;p&gt;负载均衡可在多个服务器之间平均分配网络流量，从而更容易扩展流量的快速增长。&lt;br&gt;
即使一台或多台CDN服务器由于硬件故障而脱机，智能故障切换也可提供不间断的服务；故障转移可以将流量重新分配给其他运行服务器。&lt;/p&gt;
&lt;p&gt;如果整个数据中心都遇到技术问题，那么 Anycast 路由会将流量转移到另一个可用的数据中心，以确保没有用户失去对网站的访问权限。&lt;/p&gt;
&lt;h5 id=&#34;数据安全性--cdn如何保护数据&#34;&gt;数据安全性 – CDN如何保护数据？&lt;/h5&gt;
&lt;p&gt;信息安全是CDN不可或缺的一部分。 CDN可以使用新的 TLS / SSL证书保护站点的安全，这将确保高标准的身份验证、加密和完整性。调查围绕CDN的安全问题，并探索可以采取哪些措施安全地交付内容。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Bootstrap</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/bootstrap/" />
            <id>https://cym2050.github.io/posts/bootstrap/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-04T00:13:45&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">预构建的前端模块，使用flex实现，引用之后在Bootstrap复制代码即可使用相关……</summary>
            
                <content type="html">&lt;p&gt;预构建的前端模块，使用flex实现，引用之后在Bootstrap复制代码即可使用相关模块，例如导航栏等&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;p&gt;cdn&lt;br&gt;
下载css、JavaScript文件&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;上bootstrap复制想要的组件&lt;/p&gt;
&lt;h3 id=&#34;修改&#34;&gt;修改&lt;/h3&gt;
&lt;p&gt;可以在Bootstrap类上使用自己的style&lt;/p&gt;
&lt;h3 id=&#34;layout&#34;&gt;layout&lt;/h3&gt;
&lt;p&gt;12列网格系统，container、row、col-sm-12、col-md-12、col-lg-12&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">前端资源站</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E7%AB%99/" />
            <id>https://cym2050.github.io/posts/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E7%AB%99/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-03T23:23:53&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">TODO：</summary>
            
                <content type="html">&lt;p&gt;TODO：&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">CSS</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/css/" />
            <id>https://cym2050.github.io/posts/css/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-03T17:43:58&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">一.使用CSS的三种方式 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;quot;&amp;gt; &amp;lt;style&amp;gt; &amp;lt;/style&amp;gt; &amp;lt;a href=&amp;quot;&amp;quot; style=&amp;quot;&amp;quot;&amp;gt; 二.CSS格式 选择器 { 属性 : 值 } https://css-tricks.com/almanac/ 三.选择器……</summary>
            
                <content type="html">&lt;h3 id=&#34;一使用css的三种方式&#34;&gt;一.使用CSS的三种方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;style&amp;gt; &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;quot; style=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二css格式&#34;&gt;二.CSS格式&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;选择器 {
  属性 : 值
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/almanac/&#34;&gt;https://css-tricks.com/almanac/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;三选择器&#34;&gt;三.选择器&lt;/h3&gt;
&lt;p&gt;*、element、.class、#id、，、+、&amp;gt;、:hover、:first-child、last-child、!important&lt;/p&gt;
&lt;h3 id=&#34;四常用属性&#34;&gt;四.常用属性&lt;/h3&gt;
&lt;p&gt;text&amp;amp;font：text-decoration,text-tranform,line-height,font-sytle,font-weight,font-size,font-family,x`&lt;br&gt;
img：weight、height&lt;br&gt;
background: url() ;&lt;br&gt;
backgroundsize: cover&lt;/p&gt;
&lt;h3 id=&#34;五blockinlineinline-block&#34;&gt;五.block、inline、inline-block&lt;/h3&gt;
&lt;h3 id=&#34;六box-model&#34;&gt;六.box model&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cym2050.github.io/images/box-model.png&#34; alt=&#34;&#34; title=&#34;盒模型&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;七flex-box&#34;&gt;七.flex-box&lt;/h3&gt;
&lt;p&gt;像用格子纸写作文一样，一个个元素从左至右，从上至下的流&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;display: flex;
flex-warp: warp;
justify-content: center
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&#34;&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://darekkay.com/dev/flexbox-cheatsheet.html&#34;&gt;https://darekkay.com/dev/flexbox-cheatsheet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;八grid&#34;&gt;八.grid&lt;/h3&gt;
&lt;h3 id=&#34;九css3&#34;&gt;九.CSS3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;transform：scale(1.1)&lt;/li&gt;
&lt;li&gt;transition：all 1s;&lt;/li&gt;
&lt;li&gt;[more about what you can do with Transitions and Transforms](more about what you can do with Transitions and Transforms)&lt;br&gt;
animation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/responsive-web-design/basic-css/&#34;&gt;practice your CSS skill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear: both&lt;/code&gt; : 使自己不受float元素的影响，处于float元素流的后方&lt;/li&gt;
&lt;li&gt;box的大小是由height、weight、padding、border、margin决定的，weight、height与font-size的分离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags always go inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element, and are typically used to specify character set, page description, keywords, author of the document, and viewport settings. &lt;a href=&#34;https://www.w3schools.com/tags/tag_meta.asp&#34;&gt;https://www.w3schools.com/tags/tag_meta.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;::after 浮在显示元素的下面  ::before 浮在显示元素的上面 content 属性为显示的内容&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;website-made-with-love&#34;&gt;Website Made With Love&lt;/h6&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">有关互联网历史的三个视频</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E6%9C%89%E5%85%B3%E4%BA%92%E8%81%94%E7%BD%91%E5%8E%86%E5%8F%B2%E7%9A%84%E4%B8%89%E4%B8%AA%E8%A7%86%E9%A2%91/" />
            <id>https://cym2050.github.io/posts/%E6%9C%89%E5%85%B3%E4%BA%92%E8%81%94%E7%BD%91%E5%8E%86%E5%8F%B2%E7%9A%84%E4%B8%89%E4%B8%AA%E8%A7%86%E9%A2%91/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-03T17:20:29&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">计算机网络 互联网 万维网</summary>
            
                <content type="html">&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3QhU9jd03a0&amp;amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&amp;amp;index=29&#34;&gt;计算机网络&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=AEaKrq3SpW8&amp;amp;index=30&amp;amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&#34;&gt;互联网&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=guvsH5OFizE&amp;amp;index=31&amp;amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&#34;&gt;万维网&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">HTML&#39;s Form</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/htmls-form/" />
            <id>https://cym2050.github.io/posts/htmls-form/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-02T23:55:03&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">&amp;lt;form method=&amp;quot;GET&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;password&amp;quot;name=&amp;quot;use for queryString&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;date&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;reset&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;this&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;this&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt; &amp;lt;select&amp;gt; &amp;lt;option value=&amp;quot;HTML&amp;quot;&amp;gt;HTML&amp;lt;/option&amp;gt; &amp;lt;br&amp;gt; &amp;lt;option value=&amp;quot;CSS&amp;quot;&amp;gt;CSS&amp;lt;/option&amp;gt; &amp;lt;br&amp;gt; &amp;lt;option value=&amp;quot;JavaScript&amp;quot;&amp;gt;JavaScript&amp;lt;/option&amp;gt; &amp;lt;br&amp;gt; &amp;lt;/select&amp;gt;  HTML CSS JavaScript  &amp;lt;form&amp;gt; </summary>
            
                <content type="html">&lt;p&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;GET&amp;quot;&amp;gt;&lt;/code&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;text&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;email&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;password&amp;quot;name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt;&lt;input type=&#34;password&#34; min=&#34;6&#34;&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;date&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;submit&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;reset&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;reset&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;this&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;radio&#34; name=&#34;this&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;this&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;radio&#34; name=&#34;this&#34;&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;use for queryString&amp;quot;&amp;gt;&lt;/code&gt; &lt;input type=&#34;checkbox&#34;&gt; &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;select&amp;gt;
    &amp;lt;option value=&amp;quot;HTML&amp;quot;&amp;gt;HTML&amp;lt;/option&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;option value=&amp;quot;CSS&amp;quot;&amp;gt;CSS&amp;lt;/option&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;option value=&amp;quot;JavaScript&amp;quot;&amp;gt;JavaScript&amp;lt;/option&amp;gt; &amp;lt;br&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;select&gt;
    &lt;option value=&#34;HTML&#34;&gt;HTML&lt;/option&gt; &lt;br&gt;
    &lt;option value=&#34;CSS&#34;&gt;CSS&lt;/option&gt; &lt;br&gt;
    &lt;option value=&#34;JavaScript&#34;&gt;JavaScript&lt;/option&gt; &lt;br&gt;
&lt;/select&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; &lt;br&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">W3C与MDN</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/w3c%E4%B8%8Emdn/" />
            <id>https://cym2050.github.io/posts/w3c%E4%B8%8Emdn/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-08-01T10:43:59&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">W3C 简介 W3C（World Wide Web Consortium）由Tim Berners-Lee建立……</summary>
            
                <content type="html">&lt;h2 id=&#34;w3c-简介&#34;&gt;W3C 简介&lt;/h2&gt;
&lt;p&gt;W3C（World Wide Web Consortium）由Tim Berners-Lee建立于1994年的一个会员组织，其目的是通过促进通用协议的发展，以激发web世界的全部潜能。W3C 标准被称为 W3C 推荐（W3C Recommendations）。&lt;/p&gt;
&lt;h2 id=&#34;mdn简介&#34;&gt;MDN简介&lt;/h2&gt;
&lt;p&gt;MDN是一个学习web开发技术的免费网站，网址是[&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/learn&#34;&gt;https://developer.mozilla.org/zh-CN/docs/learn&lt;/a&gt;&lt;br&gt;
](&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/learn&#34;&gt;https://developer.mozilla.org/zh-CN/docs/learn&lt;/a&gt;&lt;br&gt;
)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网络技术开发文档的免费网站。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">HTML</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/html/" />
            <id>https://cym2050.github.io/posts/html/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-07-31T22:12:44&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">HTML:超文本标记语言 HTML的版本、HTML 4.01、XTML、HTML5、HT……</summary>
            
                <content type="html">&lt;h5 id=&#34;html超文本标记语言&#34;&gt;HTML:超文本标记语言&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;HTML的版本、HTML 4.01、XTML、HTML5、HTML 5.1&lt;/li&gt;
&lt;li&gt;规范文档根据浏览器的实际情况总结，由W3C编写&lt;/li&gt;
&lt;li&gt;DOCTYPE&lt;br&gt;
用来选择文档类型&lt;/li&gt;
&lt;li&gt;常见标签&lt;br&gt;
a、form、input、button、h1、p、ul、ol、small、strong、div、kbd、video、audio、svg，除了div和span，其他标签都有默认样式&lt;/li&gt;
&lt;li&gt;什么是空标签&lt;br&gt;
没有闭合的标签称为空标签，如：&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;等。 他们不存在成对的情况,反之具有成对性质的例如：&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;、 &amp;lt;form&amp;gt;&amp;lt;/form&amp;gt; &lt;/code&gt;就不是空标签。在HTML中，在空标签上使用闭标签是无效的，例如： &lt;code&gt;&amp;lt;/br&amp;gt;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;什么是可替换标签&lt;br&gt;
在 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS&#34;&gt;CSS&lt;/a&gt; 中，&lt;strong&gt;可替换元素&lt;/strong&gt;（&lt;strong&gt;replaced element&lt;/strong&gt;）的展现效果不是由 CSS 来控制的。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。简单来说，它们的内容不受当前文档的样式的影响。CSS 可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。某些可替换元素，例如 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe&#34; title=&#34;HTML内联框架元素 &amp;lt;iframe&amp;gt; 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。&#34;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; 元素，可能具有自己的样式表，但它们不会继承父文档的样式。&lt;br&gt;
典型的可替换元素有：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe&#34; title=&#34;HTML内联框架元素 &amp;lt;iframe&amp;gt; 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。&#34;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video&#34; title=&#34;HTML &amp;lt;video&amp;gt; 元素 用于在HTML或者XHTML文档中嵌入媒体播放器，用于支持文档内的视频播放。&#34;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/embed&#34; title=&#34;HTML &amp;lt;embed&amp;gt; 元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。&#34;&gt;&lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img&#34; title=&#34;HTML Image 元素（ &amp;lt;img&amp;gt; ）代表文档中的一个图像。&#34;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;学会查看MDN文档&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">从你输入一个网址时到网页呈现在你面前，中间发生了什么？</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E4%BB%8E%E4%BD%A0%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E7%BD%91%E5%9D%80%E6%97%B6%E5%88%B0%E7%BD%91%E9%A1%B5%E5%91%88%E7%8E%B0%E5%9C%A8%E4%BD%A0%E9%9D%A2%E5%89%8D%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" />
            <id>https://cym2050.github.io/posts/%E4%BB%8E%E4%BD%A0%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E7%BD%91%E5%9D%80%E6%97%B6%E5%88%B0%E7%BD%91%E9%A1%B5%E5%91%88%E7%8E%B0%E5%9C%A8%E4%BD%A0%E9%9D%A2%E5%89%8D%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-04-10T22:55:08&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">TODO: 提供服务的服务器都有自己独立的IP地址，我们正是通过IP地址访问来访问服务，由于I……</summary>
            
                <content type="html">&lt;p&gt;TODO:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cym2050.github.io/images/internet-map-featured.jpg&#34; alt=&#34;互联网拓扑图&#34; title=&#34;互联网拓扑图，每一个端点代表一个联网的设备，由IP地址唯一标识&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cym2050.github.io/images/route.png&#34; alt=&#34;网络路径&#34; title=&#34;浏览器 &amp;lt;--&amp;gt; 路由器 &amp;lt;--&amp;gt; ISP(网络服务提供商) &amp;lt;--&amp;gt; 服务器&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;提供服务的服务器都有自己独立的ip地址我们正是通过ip地址访问来访问服务由于ip地址难以记忆我们通常使用网址来访问服务再由电脑自动为我们转换为ip地址&#34;&gt;提供服务的服务器都有自己独立的IP地址，我们正是通过IP地址访问来访问服务，由于IP地址难以记忆，我们通常使用网址来访问服务，再由电脑自动为我们转换为IP地址&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://cym2050.github.io/images/DNSparse.png&#34; alt=&#34;DNS解析&#34; title=&#34;DNS解析&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;当我们输入网址wwwgooglecom&#34;&gt;当我们输入网址www.Google.com&lt;/h6&gt;
&lt;p&gt;1.首先进行DNS（网络地址转换），由缓存或者DNS服务器得到实际的IP地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有缓存时：由本地域名服务器 -&amp;gt; 根域名服务器 -&amp;gt; 顶级域名服务器依次查询，直到查找到服务器IP地址&lt;/li&gt;
&lt;li&gt;有缓存时：在缓存直接获取，根据与浏览器的距离有浏览器缓存，系统缓存，路由器缓存，ISP服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.根据IP地址访问到服务，服务器返回我们需要的文件，然后浏览器渲染出页面&lt;br&gt;
&lt;img src=&#34;https://cym2050.github.io/images/c-s.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">homebrew常用命令</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/homebrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" />
            <id>https://cym2050.github.io/posts/homebrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-04-08T19:50:32&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docter install remove search list info deps update upgrade pin unpin outdated cleanup</summary>
            
                <content type="html">&lt;p&gt;docter&lt;br&gt;
install &lt;br&gt;
remove&lt;br&gt;
search &lt;br&gt;
list&lt;br&gt;
info&lt;br&gt;
deps&lt;br&gt;
update&lt;br&gt;
upgrade&lt;br&gt;
pin&lt;br&gt;
unpin&lt;br&gt;
outdated&lt;br&gt;
cleanup&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">网络代理</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/" />
            <id>https://cym2050.github.io/posts/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-04-08T17:23:27&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">http、https、socks5 参考 https://vimcaw.github.io/blog/2017/08/13/ShadowsocksR%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/</summary>
            
                <content type="html">&lt;h1 id=&#34;httphttpssocks5&#34;&gt;http、https、socks5&lt;/h1&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vimcaw.github.io/blog/2017/08/13/ShadowsocksR%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/&#34;&gt;https://vimcaw.github.io/blog/2017/08/13/ShadowsocksR%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">macOS终端开启代理</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/macos%E7%BB%88%E7%AB%AF%E5%BC%80%E5%90%AF%E4%BB%A3%E7%90%86/" />
            <id>https://cym2050.github.io/posts/macos%E7%BB%88%E7%AB%AF%E5%BC%80%E5%90%AF%E4%BB%A3%E7%90%86/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-04-07T19:15:13&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">默认你本地已有可以访问404的代理 设置代理 export http_proxy=&amp;quot;http://127.0.0.1:1086&amp;quot; export https_proxy=&amp;quot;http://127.0.0.1:1086&amp;quot; export all_proxy=&amp;quot;socks5://127.0.0.1:1086&amp;quot; 取消代理 unset http_proxy unset https_proxy unset all_proxy</summary>
            
                <content type="html">&lt;p&gt;默认你本地已有可以访问404的代理&lt;/p&gt;
&lt;p&gt;设置代理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export http_proxy=&amp;quot;http://127.0.0.1:1086&amp;quot;
export https_proxy=&amp;quot;http://127.0.0.1:1086&amp;quot;
export all_proxy=&amp;quot;socks5://127.0.0.1:1086&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取消代理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unset http_proxy
unset https_proxy
unset all_proxy
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">最好vim教程</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E6%9C%80%E5%A5%BDvim%E6%95%99%E7%A8%8B/" />
            <id>https://cym2050.github.io/posts/%E6%9C%80%E5%A5%BDvim%E6%95%99%E7%A8%8B/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-04-07T16:54:22&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我所知道的最好的Vim教程，在使用终端时随时可学习 Windows，使用Git Bash……</summary>
            
                <content type="html">&lt;h4 id=&#34;我所知道的最好的vim教程在使用终端时随时可学习&#34;&gt;我所知道的最好的Vim教程，在使用终端时随时可学习&lt;/h4&gt;
&lt;p&gt;Windows，使用Git Bash输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vimtutor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;macOS、Linux，在终端输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vimtutor
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;内容预览&#34;&gt;内容预览&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;=======    欢     迎     阅     读   《 V I M  教  程 》   ——      版本 1.7       ======

     Vim 是一个具有很多命令的功能非常强大的编辑器。限于篇幅，在本教程当中
     就不详细介绍了。本教程的设计目标是讲述一些必要的基本命令，而掌握好这
     些命令，您就能够很容易地将 Vim 当作一个通用编辑器来使用了。

     完成本教程的内容大约需要25-30分钟，取决于您训练的时间。

     注意：
     每一节的命令操作将会更改本文。推荐您复制本文的一个副本，然后在副本上
     进行训练(如果您是通过&amp;quot;vimtutor&amp;quot;来启动教程的，那么本文就已经是副本了)。

     切记一点：本教程的设计思路是在使用中进行学习的。也就是说，您需要通过
     执行命令来学习它们本身的正确用法。如果您只是阅读而不操作，那么您可能
     会很快遗忘这些命令的！

     好了，现在请确定您的Shift-Lock(大小写锁定键)还没有按下，然后按键盘上
     的字母键 j 足够多次来移动光标，直到第一节的内容能够完全充满屏幕。
     
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第一讲第一节：移动光标


	     ** 要移动光标，请依照说明分别按下 h、j、k、l 键。 **

	     ^
	     k		    提示： h 的键位于左边，每次按下就会向左移动。
       &amp;lt; h	 l &amp;gt;		   l 的键位于右边，每次按下就会向右移动。
	     j			   j 键看起来很象一支尖端方向朝下的箭头。
	     v

  1. 请随意在屏幕内移动光标，直至您觉得舒服为止。

  2. 按下下行键(j)，直到出现光标重复下行。

---&amp;gt; 现在您应该已经学会如何移动到下一讲吧。

  3. 现在请使用下行键，将光标移动到第一讲第二节。

提示：如果您不敢确定您所按下的字母，请按下&amp;lt;ESC&amp;gt;键回到正常(Normal)模式。
      然后再次从键盘输入您想要的命令。

提示：光标键应当也能正常工作的。但是使用hjkl键，在习惯之后您就能够更快
      地在屏幕内四处移动光标。真的是这样！

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第一讲第二节：VIM的进入和退出


  !! 特别提示：敬请阅读本一节的完整内容，然后再执行以下所讲解的命令。

  1. 按&amp;lt;ESC&amp;gt;键(这是为了确保您处在正常模式)。

  2. 然后输入：			:q! &amp;lt;回车&amp;gt;
     这种方式的退出编辑器会丢弃您进入编辑器以来所做的改动。

  3. 如果您看到了命令行提示符，请输入能够带您回到本教程的命令，那就是：
     vimtutor &amp;lt;回车&amp;gt;

  4. 如果您自信已经牢牢记住了这些步骤的话，请从步骤1执行到步骤3退出，然
     后再次进入编辑器。

提示： :q! &amp;lt;回车&amp;gt; 会丢弃您所做的任何改动。几讲之后您将学会如何保存改动到文件。

  5. 将光标下移到第一讲第三节。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第一讲第三节：文本编辑之删除


   ** 在正常(Normal)模式下，可以按下 x 键来删除光标所在位置的字符。**

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的那一行。

  2. 为了修正输入错误，请将光标移至准备删除的字符的位置处。

  3. 然后按下 x 键将错误字符删除掉。

  4. 重复步骤2到步骤4，直到句子修正为止。

---&amp;gt; The ccow jumpedd ovverr thhe mooon.

  5. 好了，该行已经修正了，下面是第一讲第四节。

特别提示：在浏览本教程时，不要强行记忆。记住一点：在使用中学习。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     第一讲第四节：文本编辑之插入


	 ** 在正常模式下，可以按下 i 键来插入文本。**

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的第一行。

  2. 为了使得第一行内容雷同于第二行，请将光标移至文本第一个准备插入字符
     的位置。

  3. 然后按下 i 键，接着输入必要的文本字符。

  4. 每个错误修正完毕后，请按下 &amp;lt;ESC&amp;gt; 键返回正常模式。
     重复步骤2至步骤4以便修正句子。

---&amp;gt; There is text misng this .
---&amp;gt; There is some text missing from this line.

  5. 如果您对文本插入操作已经很满意，请接着阅读下面的第一讲第五节。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     第一讲第五节：文本编辑之添加


			** 按 A 键以添加文本。 **

  1. 移动光标到下面第一个标记有 ---&amp;gt; 的一行。
     光标放在那一行的哪个字符上并不重要。

  2. 按 A 键输入必要的添加内容。

  3. 文本添加完毕后，按 &amp;lt;ESC&amp;gt; 键回到正常模式。

  4. 移动光标到下面第二个标记有 ---&amp;gt; 的一行。重复步骤2和步骤3以改正这个句子。

---&amp;gt; There is some text missing from th
     There is some text missing from this line.
---&amp;gt; There is also some text miss
     There is also some text missing here.

  5. 当您对添加文本操作感到满意时，请继续学习第一讲第六节。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     第一讲第六节：编辑文件

		    ** 使用 :wq 以保存文件并退出。 **

  特别提示：在执行以下步骤之前，请先读完整个小节！

  1. 如您在第一讲第二节中所做的那样退出本教程： :q!
     或者，如果您可以访问另一个终端，请在那里执行以下操作。

  2. 在 shell 的提示符下输入命令： vim tutor &amp;lt;回车&amp;gt;
     &#39;vim&#39;是启动 Vim 编辑器的命令，&#39;tutor&#39;是您希望编辑的文件的名字。
     请使用一个可以改动的文件。

  3. 使用您在前面的教程中学到的命令插入删除文本。

  4. 保存改动过的文件并退出 Vim，按这些键： :wq  &amp;lt;回车&amp;gt;

  5. 如果您在步骤1中已经退出 vimtutor，请重启 vimtutor 移动到下面的小结一节。

  6. 阅读完以上步骤，弄懂它们的意义，然后在实践中进行练习。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       第一讲小结


  1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。
	 h (左移)	j (下行)       k (上行)	    l (右移)

  2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &amp;lt;回车&amp;gt;

  3. 欲退出 Vim 编辑器，请输入 &amp;lt;ESC&amp;gt;   :q!   &amp;lt;回车&amp;gt; 放弃所有改动。
                      或者输入 &amp;lt;ESC&amp;gt;   :wq   &amp;lt;回车&amp;gt; 保存改动。

  4. 在正常模式下删除光标所在位置的字符，请按： x

  5. 欲插入或添加文本，请输入：

	 i   输入欲插入文本   &amp;lt;ESC&amp;gt;		在光标前插入文本
	 A   输入欲添加文本   &amp;lt;ESC&amp;gt;             在一行后添加文本

特别提示：按下 &amp;lt;ESC&amp;gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整
的命令。

好了，第一讲到此结束。下面接下来继续第二讲的内容。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第二讲第一节：删除类命令


	    ** 输入 dw 可以从光标处删除至一个单词的末尾。**

  1. 请按下 &amp;lt;ESC&amp;gt; 键确保您处于正常模式。

  2. 请将光标移动到本节中下面标记有 ---&amp;gt; 的那一行。

  3. 请将光标移至准备要删除的单词的起始处。

  4. 接着输入 dw 删除掉该单词。

  特别提示：当您输入时，字母 d 会同时出现在屏幕的最后一行。Vim 在等待您输入
  字母 w。如果您看到的是除 d 外的其他字符，那表明您按错了；请按下 &amp;lt;ESC&amp;gt; 键，
  然后重新再来。

---&amp;gt; There are a some words fun that don&#39;t belong paper in this sentence.

  5. 重复步骤3和步骤4，直至句子修正完毕。接着继续第二讲第二节内容。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      第二讲第二节：更多删除类命令


		   ** 输入 d$ 从当前光标删除到行末。**

  1. 请按下 &amp;lt;ESC&amp;gt; 键确保您处于正常模式。

  2. 请将光标移动到本节中下面标记有 ---&amp;gt; 的那一行。

  3. 请将光标移动到该行的尾部(也就是在第一个点号‘.’后面)。

  4. 然后输入 d$ 从光标处删至当前行尾部。

---&amp;gt; Somebody typed the end of this line twice. end of this line twice.


  5. 请继续学习第二讲第三节就知道是怎么回事了。





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     第二讲第三节：关于命令和对象


  许多改变文本的命令都由一个操作符和一个动作构成。
  使用删除操作符 d 的删除命令的格式如下：

	d   motion

  其中：
    d      - 删除操作符。
    motion - 操作符的操作对象(在下面列出)。

  一个简短的动作列表：
    w - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。
    e - 从当前光标当前位置直到单词末尾，包括最后一个字符。
    $ - 从当前光标当前位置直到当前行末。

  因此输入 de 会从当前光标位置删除到单词末尾。

特别提示：
    对于勇于探索者，请在正常模式下面仅按代表相应动作的键而不使用操作符，您
    将看到光标的移动正如上面的对象列表所代表的一样。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     第二讲第四节：使用计数指定动作


             ** 在动作前输入数字会使它重复那么多次。 **

  1. 移动光标到下面标记有 ---&amp;gt; 的一行的开始。

  2. 输入 2w 使光标向前移动两个单词。

  3. 输入 3e 使光标向前移动到第三个单词的末尾。

  4. 输入 0 (数字零) 移动光标到行首。

  5. 重复步骤2和步骤3，尝试不同的数字。

---&amp;gt; This is just a line with words you can move around in.

  6. 请继续学习第二讲第五节。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       第二讲第五节：使用计数以删除更多


	       ** 使用操作符时输入数字可以使它重复那么多次。 **

  上面已经提到过删除操作符和动作的组合，您可以在组合中动作之前插入一个数字以
  删除更多：
	 d   number(数字)   motion

  1. 移动光标到下面标记有 ---&amp;gt; 的一行中第一个大写字母单词上。

  2. 输入 d2w 以删除两个大写字母单词。

  3. 重复步骤1和步骤2，使用不同的数字使得用一个命令就能删除全部相邻的大写字母
     单词

---&amp;gt;  this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			    第二讲第六节：操作整行


		     ** 输入 dd 可以删除整一个当前行。 **

  鉴于整行删除的高频度，Vi 的设计者决定要简化整行删除操作，您仅需要在同一行上
  击打两次 d 就可以删除掉光标所在的整行了。

  1. 请将光标移动到本节中下面的短句段落中的第二行。
  2. 输入 dd 删除该行。
  3. 然后移动到第四行。
  4. 接着输入 2dd 删除两行。

---&amp;gt;  1)  Roses are red,
---&amp;gt;  2)  Mud is fun,
---&amp;gt;  3)  Violets are blue,
---&amp;gt;  4)  I have a car,
---&amp;gt;  5)  Clocks tell time,
---&amp;gt;  6)  Sugar is sweet
---&amp;gt;  7)  And so are you.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			   第二讲第七节：撤消类命令


	** 输入 u 来撤消最后执行的命令，输入 U 来撤消对整行的修改。 **

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的那一行，并将其置于第一个错误
     处。
  2. 输入 x 删除第一个不想保留的字母。
  3. 然后输入 u 撤消最后执行的(一次)命令。
  4. 这次要使用 x 修正本行的所有错误。
  5. 现在输入一个大写的 U ，恢复到该行的原始状态。
  6. 接着多次输入 u 以撤消 U 以及更前的命令。
  7. 然后多次输入 CTRL-R (先按下 CTRL 键不放开，接着按 R 键)，这样就
     可以重做被撤消的命令，也就是撤消掉撤消命令。

---&amp;gt; Fiix the errors oon thhis line and reeplace them witth undo.

  8. 这些都是非常有用的命令。下面是第二讲的小结了。




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       第二讲小结


  1. 欲从当前光标删除至下一个单词，请输入：dw
  2. 欲从当前光标删除至当前行末尾，请输入：d$
  3. 欲删除整行，请输入：dd

  4. 欲重复一个动作，请在它前面加上一个数字：2w
  5. 在正常模式下修改命令的格式是：
               operator   [number]   motion
     其中：
       operator - 操作符，代表要做的事情，比如 d 代表删除
       [number] - 可以附加的数字，代表动作重复的次数
       motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，
		  $ 代表行末等等。

  6. 欲移动光标到行首，请按数字0键：0

  7. 欲撤消以前的操作，请输入：u (小写的u)
     欲撤消在一行中所做的改动，请输入：U (大写的U)
     欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			   第三讲第一节：置入类命令


		** 输入 p 将最后一次删除的内容置入光标之后。 **

  1. 请将光标移动到本节中下面第一个标记有 ---&amp;gt; 的一行。

  2. 输入 dd 将该行删除，这样会将该行保存到 Vim 的一个寄存器中。

  3. 接着将光标移动到 c) 一行，即准备置入的位置的上方。记住：是上方哦。

  4. 然后在正常模式下(&amp;lt;ESC&amp;gt;键进入)输入 p 将该行粘贴置入。

  5. 重复步骤2至步骤4，将所有的行依序放置到正确的位置上。

---&amp;gt; d) Can you learn too?
---&amp;gt; b) Violets are blue,
---&amp;gt; c) Intelligence is learned,
---&amp;gt; a) Roses are red,



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			   第三讲第二节：替换类命令


	  ** 输入 r 和一个字符替换光标所在位置的字符。**

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的第一行。

  2. 请移动光标到第一个出错的位置。

  3. 接着输入 r 和要替换成的字符，这样就能将错误替换掉了。

  4. 重复步骤2和步骤3，直到第一行已经修改完毕。

---&amp;gt;  Whan this lime was tuoed in, someone presswd some wrojg keys!
---&amp;gt;  When this line was typed in, someone pressed some wrong keys!

  5. 然后我们继续学习第三讲第三节。

特别提示：切记您要在使用中学习，而不是在记忆中学习。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第三讲第三节：更改类命令


		 ** 要改变文本直到一个单词的末尾，请输入 ce **

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的第一行。

  2. 接着把光标放在单词 lubw 的字母 u 的位置那里。

  3. 然后输入 cw 以及正确的单词(在本例中是输入 ine )。

  4. 最后按 &amp;lt;ESC&amp;gt; 键，然后光标定位到下一个错误第一个准备更改的字母处。

  5. 重复步骤3和步骤4，直到第一个句子完全雷同第二个句子。

---&amp;gt; This lubw has a few wptfd that mrrf changing usf the change operator.
---&amp;gt; This line has a few words that need changing using the change operator.

提示：请注意 ce 命令不仅仅是删除了一个单词，它也让您进入插入模式了。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       第三讲第四节：使用c更改更多


	   ** 更改类操作符可以与删除中使用的同样的动作配合使用。 **

  1. 更改类操作符的工作方式跟删除类是一致的。操作格式是：

         c    [number]   motion

  2. 动作参数(motion)也是一样的，比如 w 代表单词，$代表行末等等。

  3. 请将光标移动到本节中下面标记有 ---&amp;gt; 的第一行。

  4. 接着将光标移动到第一个错误处。

  5. 然后输入 c$ 使得该行剩下的部分更正得同第二行一样。最后按 &amp;lt;ESC&amp;gt; 键。

---&amp;gt; The end of this line needs some help to make it like the second.
---&amp;gt; The end of this line needs to be corrected using the  c$  command.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				  第三讲小结


  1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除
     的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置
     于当前光标所在行的下一行。

  2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字
     符即可。

  3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。
     比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当
     前光标到行末的内容。

  4. 更改类命令的格式是：

	 c   [number]   motion

现在我们继续学习下一讲。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     第四讲第一节：定位及文件状态

  ** 输入 CTRL-G 显示当前编辑文件中当前光标所在行位置以及文件状态信息。
     输入大写 G 则直接跳转到文件中的某一指定行。**

  提示：切记要先通读本节内容，之后才可以执行以下步骤!!!

  1. 按下 CTRL 键不放开然后按 g 键。我们称这个键组合为 CTRL-G。
     您会看到页面最底部出现一个状态信息行，显示的内容是当前编辑的文件名
     和文件中光标位置。请记住行号，它会在步骤3中用到。

提示：您也许会在屏幕的右下角看到光标位置，这会在 &#39;ruler&#39; 选项设置时发生
      (参见 :help &#39;ruler&#39;)

  2. 输入大写 G 可以使得当前光标直接跳转到文件最后一行。
     输入 gg 可以使得当前光标直接跳转到文件第一行。

  3. 输入您曾停留的行号，然后输入大写 G。这样就可以返回到您第一次按下
     CTRL-G 时所在的行了。

  4. 如果您觉得没问题的话，请执行步骤1至步骤3的操作进行练习。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第四讲第二节：搜索类命令


     ** 输入 / 加上一个字符串可以用以在当前文件中查找该字符串。**

  1. 在正常模式下输入 / 字符。您此时会注意到该字符和光标都会出现在屏幕底
     部，这跟 : 命令是一样的。

  2. 接着输入 errroor &amp;lt;回车&amp;gt;。那个errroor就是您要查找的字符串。

  3. 要查找同上一次的字符串，只需要按 n 键。要向相反方向查找同上一次的字
     符串，请输入大写 N 即可。

  4. 如果您想逆向查找字符串，请使用 ? 代替 / 进行。

  5. 要回到您之前的位置按 CTRL-O (按住 Ctrl 键不放同时按下字母 o)。重复按可以
     回退更多步。CTRL-I 会跳转到较新的位置。

---&amp;gt;  &amp;quot;errroor&amp;quot; is not the way to spell error;  errroor is an error.
提示：如果查找已经到达文件末尾，查找会自动从文件头部继续查找，除非
      &#39;wrapscan&#39; 选项被复位。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		   第四讲第三节：配对括号的查找


	      ** 输入 % 可以查找配对的括号 )、]、}。**

  1. 把光标放在本节下面标记有 --&amp;gt; 那一行中的任何一个 (、[ 或 { 处。

  2. 接着按 % 字符。

  3. 此时光标的位置应当是在配对的括号处。

  4. 再次按 % 就可以跳回配对的第一个括号处。

  5. 移动光标到另一个 (、)、[、]、{ 或 } 处，按 % 查看其所作所为。

---&amp;gt; This ( is a test line with (&#39;s, [&#39;s ] and {&#39;s } in it. ))


提示：在程序调试时，这个功能用来查找不配对的括号是很有用的。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      第四讲第四节：替换命令


		** 输入 :s/old/new/g 可以替换 old 为 new。**

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的那一行。

  2. 输入 :s/thee/the &amp;lt;回车&amp;gt; 。请注意该命令只改变光标所在行的第一个匹配
     串。

  3. 输入 :s/thee/the/g	则是替换全行的匹配串，该行中所有的 &amp;quot;thee&amp;quot; 都会被
     改变。

---&amp;gt; thee best time to see thee flowers is in thee spring.

  4. 要替换两行之间出现的每个匹配串，请
     输入   :#,#s/old/new/g   其中 #,# 代表的是替换操作的若干行中
                              首尾两行的行号。
     输入   :%s/old/new/g     则是替换整个文件中的每个匹配串。
     输入   :%s/old/new/gc    会找到整个文件中的每个匹配串，并且对每个匹配串
                              提示是否进行替换。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       第四讲小结


  1. CTRL-G 用于显示当前光标所在位置和文件状态信息。
     G 用于将光标跳转至文件最后一行。
     先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。
     gg 用于将光标跳转至文件第一行。

  2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。
     输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。
     完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查
     找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。
     CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。

  3. 如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。

  4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new
     在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g
     在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g
     在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g
     进行全文替换时询问用户确认每个替换需添加 c 标志        :%s/old/new/gc

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		第五讲第一节：在 VIM 内执行外部命令的方法


	   ** 输入 :! 然后紧接着输入一个外部命令可以执行该外部命令。**

  1. 按下我们所熟悉的 : 命令使光标移动到屏幕底部。这样您就可以输入一行命令了。

  2. 接着输入感叹号 ! 这个字符，这样就允许您执行外部的 shell 命令了。

  3. 我们以 ls 命令为例。输入 !ls &amp;lt;回车&amp;gt; 。该命令就会列举出您当前目录的
     内容，就如同您在命令行提示符下输入 ls 命令的结果一样。如果 !ls 没起
     作用，您可以试试 :!dir 看看。

提示：所有的外部命令都可以以这种方式执行，包括带命令行参数的那些。

提示：所有的 : 命令都必须以敲 &amp;lt;回车&amp;gt; 键结束。从今以后我们就不会总是提到这一点
      了。





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      第五讲第二节：关于保存文件的更多信息


	     ** 要将对文件的改动保存到文件中，请输入 :w FILENAME 。**

  1. 输入 :!dir 或者 :!ls 获知当前目录的内容。您应当已知道最后还得敲
     &amp;lt;回车&amp;gt; 吧。

  2. 选择一个未被用到的文件名，比如 TEST。

  3. 接着输入 :w TEST  (此处 TEST 是您所选择的文件名。)

  4. 该命令会以 TEST 为文件名保存整个文件 (Vim 教程)。为了验证这一点，
     请再次输入 :!dir 或 :!ls 查看您的目录列表内容。

请注意：如果您退出 Vim 然后在以命令 vim TEST 再次启动 Vim，那么该文件内
     容应该同您保存时的文件内容是完全一样的。

  5. 现在您可以删除 TEST 文件了。在 MS-DOS 下，请输入：   :!del TEST
                                 在 Unix 下，请输入：     :!rm TEST


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		    第五讲第三节：一个具有选择性的保存命令


	    ** 要保存文件的部分内容，请输入 v motion :w FILENAME **

  1. 移动光标到本行。

  2. 接着按 v 键，将光标移动至下面第五个条目上。您会注意到之间的文本被高亮了。

  3. 然后按 : 字符。您将看到屏幕底部会出现 :&#39;&amp;lt;,&#39;&amp;gt; 。

  4. 现在请输入 w TEST，其中 TEST 是一个未被使用的文件名。确认您看到了
     :&#39;&amp;lt;,&#39;&amp;gt;w TEST 之后按 &amp;lt;回车&amp;gt; 键。

  5. 这时 Vim 会把选中的行写入到以 TEST 命名的文件中去。使用 :!dir 或 :!ls
     确认文件被正确保存。这次先别删除它！我们在下一讲中会用到它。

提示：按 v 键使 Vim 进入可视模式进行选取。您可以四处移动光标使选取区域变大或
      变小。接着您可以使用一个操作符对选中文本进行操作。例如，按 d 键会删除
      选中的文本内容。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		   第五讲第四节：提取和合并文件


       ** 要向当前文件中插入另外的文件的内容，请输入 :r FILENAME **

  1. 请把光标移动到本行上面一行。

特别提示：执行步骤2之后您将看到第五讲第三节的文字，请届时往下移动
          以再次看到本讲内容。

  2. 接着通过命令 :r TEST 将前面创建的名为 TEST 的文件提取进来。
     您所提取进来的文件将从光标所在位置处开始置入。

  3. 为了确认文件已经提取成功，移动光标回到原来的位置就可以注意有两份第
     五讲第三节的内容，一份是原始内容，另外一份是来自文件的副本。

提示：您还可以读取外部命令的输出。例如， :r !ls 可以读取 ls 命令的输出，并
      把它放置在光标下面。




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       第五讲小结


  1. :!command 用于执行一个外部命令 command。

     请看一些实际例子：
	 (MS-DOS)	  (Unix)
	  :!dir		   :!ls		   -  用于显示当前目录的内容。
	  :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。

  2. :w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文
     件中。

  3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件
     FILENAME 中。

  4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置
     后面。

  5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 第六讲第一节：打开类命令


	 ** 输入 o 将在光标的下方打开新的一行并进入插入模式。**

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的那一行。

  2. 接着输入小写的 o 在光标 *下方* 打开新的一行，这个命令会使您
     进入插入模式。

  3. 然后输入一些文字，之后按 &amp;lt;ESC&amp;gt; 键退出插入模式而进入正常模式。

---&amp;gt; After typing  o  the cursor is placed on the open line in Insert mode.

  4. 为了在光标 *上方* 打开新的一行，只需要输入大写的 O 而不是小写的 o
     就可以了。请在下行测试一下吧。

---&amp;gt; Open up a line above this by typing O while the cursor is on this line.




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			第六讲第二节：附加类命令


		     ** 输入 a 将可在光标之后插入文本。 **

  1. 请在正常模式下将光标移动到本节中下面标记有 ---&amp;gt; 的第一行的行首。

  2. 接着输入 e 直到光标位于 li 的末尾。

  3. 输入小写的 a 则可在光标之后插入文本了。

  4. 将单词补充完整，就像下一行中的那样。之后按 &amp;lt;ESC&amp;gt; 键退出插入模式回到
     正常模式。

  5. 使用 e 移动光标到下一步不完整的单词，重复步骤3和步骤4。

---&amp;gt; This li will allow you to pract appendi text to a line.
---&amp;gt; This line will allow you to practice appending text to a line.

提示：a、i 和 A 都会带您进入插入模式，惟一的区别在于字符插入的位置。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		    第六讲第三节：另外一个置换类命令的版本


		      ** 输入大写的 R 可连续替换多个字符。**

  1. 请将光标移动到本节中下面标记有 ---&amp;gt; 的第一行。移动光标到第一个 xxx 的
     起始位置。

  2. 然后输入大写的 R 开始把第一行中的不同于第二行的剩余字符逐一输入，就
     可以全部替换掉原有的字符而使得第一行完全雷同第二行了。

  3. 接着按 &amp;lt;ESC&amp;gt; 键退出替换模式回到正常模式。您可以注意到尚未替换的文本
     仍然保持原状。

  4. 重复以上步骤，将剩余的 xxx 也替换掉。

---&amp;gt; Adding 123 to xxx gives you xxx.
---&amp;gt; Adding 123 to 456 gives you 579.

提示：替换模式与插入模式相似，不过每个输入的字符都会删除一个已有的字符。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			  第六讲第四节：复制粘贴文本


		 ** 使用操作符 y 复制文本，使用 p 粘贴文本 **

  1. 定位到下面标记有 ---&amp;gt; 的一行，将光标移动到 &amp;quot;a)&amp;quot; 之后。

  2. 接着使用 v 进入可视模式，移动光标到 &amp;quot;first&amp;quot; 的前面。

  3. 现在输入 y 以抽出(复制)高亮的文本。

  4. 然后移动光标到下一行的末尾：j$

  5. 接着输入 p 以放置(粘贴)复制了的文本。然后输入：a second &amp;lt;ESC&amp;gt;。

  6. 使用可视模式选中 &amp;quot; item.&amp;quot;，用 y 复制，再用 j$ 将光标移动到下一行末尾，
     用 p 将文本粘贴到那里。

---&amp;gt;  a) this is the first item.
      b)

  提示：您还可以把 y 当作操作符来使用；例如 yw 可以用来复制一个单词。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			    第六讲第五节：设置类命令的选项


		  ** 设置可使查找或者替换可忽略大小写的选项 **

  1. 要查找单词 ignore 可在正常模式下输入 /ignore &amp;lt;回车&amp;gt;。
     要重复查找该词，可以重复按 n 键。

  2. 然后设置 ic 选项(Ignore Case，忽略大小写)，请输入： :set ic

  3. 现在可以通过键入 n 键再次查找单词 ignore。注意到 Ignore 和 IGNORE 现在
     也被找到了。

  4. 然后设置 hlsearch 和 incsearch 这两个选项，请输入： :set hls is

  5. 现在可以再次输入查找命令，看看会有什么效果： /ignore &amp;lt;回车&amp;gt;

  6. 要禁用忽略大小写，请输入： :set noic

提示：要移除匹配项的高亮显示，请输入：  :nohlsearch
提示：如果您想要仅在一次查找时忽略字母大小写，您可以使用 \c：
      /ignore\c &amp;lt;回车&amp;gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       第六讲小结

  1. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。
     输入大写的 O 可以在光标上方打开新的一行。

  2. 输入小写的 a 可以在光标所在位置之后插入文本。
     输入大写的 A 可以在光标所在行的行末之后插入文本。

  3. e 命令可以使光标移动到单词末尾。

  4. 操作符 y 复制文本，p 粘贴先前复制的文本。

  5. 输入大写的 R 将进入替换模式，直至按 &amp;lt;ESC&amp;gt; 键回到正常模式。

  6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：
  	&#39;ic&#39; &#39;ignorecase&#39;	查找时忽略字母大小写
	&#39;is&#39; &#39;incsearch&#39;	查找短语时显示部分匹配
	&#39;hls&#39; &#39;hlsearch&#39;	高亮显示所有的匹配短语
     选项名可以用完整版本，也可以用缩略版本。

  7. 在选项前加上 no 可以关闭选项：  :set noic

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			  第七讲第一节：获取帮助信息


		      ** 使用在线帮助系统 **

  Vim 拥有一个细致全面的在线帮助系统。要启动该帮助系统，请选择如下三种方
  法之一：
	- 按下 &amp;lt;HELP&amp;gt; 键 (如果键盘上有的话)
	- 按下 &amp;lt;F1&amp;gt; 键 (如果键盘上有的话)
	- 输入	:help &amp;lt;回车&amp;gt;

  请阅读帮助窗口中的文字以了解帮助是如何工作的。
  输入 CTRL-W CTRL-W   可以使您在窗口之间跳转。
  输入 :q &amp;lt;回车&amp;gt; 可以关闭帮助窗口。

  提供一个正确的参数给&amp;quot;:help&amp;quot;命令，您可以找到关于该主题的帮助。请试验以
  下参数(可别忘了按回车键哦)：

	:help w
	:help c_CTRL-D
	:help insert-index
	:help user-manual
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			  第七讲第二节：创建启动脚本


			  ** 启用 Vim 的特性 **

  Vim 的功能特性要比 Vi 多得多，但其中大部分都没有缺省启用。为了使用更多的
  特性，您得创建一个 vimrc 文件。

  1. 开始编辑 vimrc 文件，具体命令取决于您所使用的操作系统：
        :edit ~/.vimrc		这是 Unix 系统所使用的命令
        :edit $VIM/_vimrc	这是 MS-Windows 系统所使用的命令

  2. 接着读取 vimrc 示例文件的内容：
        :r $VIMRUNTIME/vimrc_example.vim

  3. 保存文件，命令为：
        :write

  下次您启动 Vim 时，编辑器就会有了语法高亮的功能。
  您可以把您喜欢的各种设置添加到这个 vimrc 文件中。
  要了解更多信息请输入 :help vimrc-intro

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			    第七讲第三节：补全功能


	      ** 使用 CTRL-D 和 &amp;lt;TAB&amp;gt; 可以进行命令行补全 **

  1. 请确保 Vim 不是在以兼容模式运行： :set nocp

  2. 查看一下当前目录下已经存在哪些文件，输入： :!ls   或者  :!dir

  3. 现在输入一个目录的起始部分，例如输入： :e

  4. 接着按 CTRL-D 键，Vim 会显示以 e 开始的命令的列表。

  5. 然后按 &amp;lt;TAB&amp;gt; 键，Vim 会补全命令为 :edit 。

  6. 现在添加一个空格，以及一个已有文件的文件名的起始部分，例如： :edit FIL

  7. 接着按 &amp;lt;TAB&amp;gt; 键，Vim 会补全文件名(如果它是惟一匹配的)。

提示：补全对于许多命令都有效。您只需尝试按 CTRL-D 和 &amp;lt;TAB&amp;gt;。
      它对于 :help 命令非常有用。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				  第七讲小结


  1. 输入 :help 或者按 &amp;lt;F1&amp;gt; 键或 &amp;lt;Help&amp;gt; 键可以打开帮助窗口。

  2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。

  3. 输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。

  4. 输入 :q 以关闭帮助窗口

  5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。

  6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。
     按 &amp;lt;TAB&amp;gt; 可以使用一个补全。







~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  vim 教程到此就结束了。本教程只是为了简明地介绍一下 Vim 编辑器，但已足以让您
  很容易使用这个编辑器了。毋庸质疑，vim还有很多很多的命令，本教程所介
  绍的距离完整的差得很远。所以您要精通的话，还望继续努力哦。下一步您可以阅读
  Vim 的用户手册，使用的命令是： :help user-manual

  下面这本书值得推荐用于更进一步的阅读和学习：
	Vim - Vi Improved - 作者：Steve Oualline
	出版社：New Riders
  这是第一本完全讲解 Vim 的书籍。它对于初学者特别有用。其中包含有大量实例
  和图示。
  欲知详情，请访问 http://iccf-holland.org/click5.html

  以下这本书比较老了而且内容更多是关于 Vi 而非 Vim，但是也值得推荐：
	Learning the Vi Editor - 作者：Linda Lamb
	出版社：O&#39;Reilly &amp;amp; Associates Inc.
  这是一本不错的书，通过它您几乎能够了解到任何您想要使用 Vi 做的事情。
  此书的第六个版本也包含了一些关于 Vim 的信息。

  本教程是由来自 Calorado School of Mines 的 Michael C. Pierce 和
  Robert K. Ware 所编写的，其中很多创意由来自 Colorado State University 的
  Charles Smith 提供。编者的电子邮箱是：bware@mines.colorado.edu

  本教程已由 Bram Moolenaar 专为 Vim 进行修订。

  译制者附言：
  ===========
      简体中文教程翻译版之译制者为梁昌泰 &amp;lt;beos@turbolinux.com.cn&amp;gt;，还有
      另外一个联系地址：linuxrat@gnuchina.org。

      繁体中文教程是从简体中文教程翻译版使用 Debian GNU/Linux 中文项目小
      组的于广辉先生编写的中文汉字转码器  autoconvert 转换而成的，并对转
      换的结果做了一些细节的改动。

  变更记录：
  =========
      2012年10月01日 赵涛 &amp;lt;alick9188@gmail.com&amp;gt;
      将 vimtutor 中译版从 1.5 升级到 1.7。

      2002年08月30日 梁昌泰 &amp;lt;beos@turbolinux.com.cn&amp;gt;
      感谢 RMS@SMTH 的指正，将多处错误修正。

      2002年04月22日 梁昌泰 &amp;lt;linuxrat@gnuchina.org&amp;gt;
      感谢 xuandong@sh163.net 的指正，将两处错别字修正。

      2002年03月18日 梁昌泰 &amp;lt;linuxrat@gnuchina.org&amp;gt;
      根据Bram Moolenaar先生在2002年03月16日的来信要求，将vimtutor1.4中译
      版升级到vimtutor1.5。

      2001年11月15日 梁昌泰 &amp;lt;linuxrat@gnuchina.org&amp;gt;
      将vimtutor1.4中译版提交给Bram Moolenaar和Sven Guckes。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hogo问题记录</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/hogo%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/" />
            <id>https://cym2050.github.io/posts/hogo%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-03-18T17:32:25&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">生成静态文件，清理，压缩 hugo --gc --minify --cleanDestinationDir</summary>
            
                <content type="html">&lt;p&gt;生成静态文件，清理，压缩&lt;br&gt;
hugo --gc --minify --cleanDestinationDir&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">试试添加图片</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E8%AF%95%E8%AF%95%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/" />
            <id>https://cym2050.github.io/posts/%E8%AF%95%E8%AF%95%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-03-17T17:32:25&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">桂林山水甲天下，阳朔山水甲桂林 第一次添加图片如上图所示，图片是旋转了180度的，在G……</summary>
            
                <content type="html">&lt;h2 id=&#34;桂林山水甲天下阳朔山水甲桂林&#34;&gt;桂林山水甲天下，阳朔山水甲桂林&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cym2050.github.io/images/%E6%A1%82%E6%9E%970.jpg&#34; alt=&#34;桂林&#34; title=&#34;桂林旅游&#34;&gt;&lt;br&gt;
第一次添加图片如上图所示，图片是旋转了180度的，在Google与百度均未发现解决方案，后面使用其他照片发现能正常显示，推测是图片本身的问题，具体原因不知，使用截图将此照片截取下来，发现能正常显示。tips：出现问题要从多个角度看待，不然循着错误的方向去解决问题会浪费很多时间。&lt;/p&gt;
&lt;p&gt;将原图片截图保存后添加至文章能正确显示：&lt;br&gt;
&lt;img src=&#34;https://cym2050.github.io/images/%E6%A1%82%E6%9E%971.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">第二篇博客</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/" />
            <id>https://cym2050.github.io/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-03-17T15:18:10&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">大家好，又见面了🙈</summary>
            
                <content type="html">&lt;p&gt;大家好，又见面了🙈&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">开博大吉</title>
            <link rel="alternate" type="text/html" href="https://cym2050.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/" />
            <id>https://cym2050.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</id>
            <updated>2020-08-20T23:26:11&#43;08:00</updated>
            <published>2020-03-17T14:19:03&#43;08:00</published>
            <author>
                    <name>CYM</name>
                    <uri>https://cym2050.github.io/</uri>
                    <email>cym2050@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">大家好!我终于开通了我的博客!!希望以后能写出好文章以飨各位读者!!!</summary>
            
                <content type="html">&lt;p&gt;大家好!我终于开通了我的博客!!希望以后能写出好文章以飨各位读者!!!&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
